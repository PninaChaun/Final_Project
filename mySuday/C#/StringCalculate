
0
using System;
using System.Collections.Generic;

class MainClass {

  public static string StringCalculate(string str)
  {
    var tokens = Lexer(str);

    int startToken = 0;
    var semantic = SemanticAnalyze(tokens, ref startToken);
    //PrintSemantic(semantic, 0);

    var result = RunSemantic(semantic);
   
    //PrintTokens(tokens);
    return result.ToString();
  }

  static int RunSemantic(List<object> semantic)
  {
      for(int i = 0; i < semantic.Count; i++)
      {
        var element = semantic[i];

        if (element is List<object>)
        {
          var subResult = RunSemantic(element as List<object>);
          semantic[i] = subResult.ToString();
        }
      }

      for(int i = 0; i < semantic.Count; i++)
      {
        var element = semantic[i];
        var token = element as string;

          if (token == "**")
          {
            var previous = semantic[i - 1] as string;
            var after = semantic[i + 1] as string;

            int previousInt = Convert.ToInt32(previous);
            int afterInt = Convert.ToInt32(after);

            var currentResult = (int)Math.Pow(previousInt, afterInt);

            semantic[i] = currentResult.ToString();
            semantic.RemoveAt(i - 1);
            semantic.RemoveAt(i);
            i--;
          }
      }

      for (int i = 0; i < semantic.Count; i++)
      {
        var element = semantic[i];
        var token = element as string;

          if (token == "*")
          {
            var previous = semantic[i - 1] as string;
            var after = semantic[i + 1] as string;

            int previousInt = Convert.ToInt32(previous);
            int afterInt = Convert.ToInt32(after);

            var currentResult = previousInt * afterInt;

            semantic[i] = currentResult.ToString();
            semantic.RemoveAt(i - 1);
            semantic.RemoveAt(i);
            i--;
          }
          else if (token == "/")
          {
            var previous = semantic[i - 1] as string;
            var after = semantic[i + 1] as string;

            int previousInt = Convert.ToInt32(previous);
            int afterInt = Convert.ToInt32(after);

            var currentResult = previousInt / afterInt;

            semantic[i] = currentResult.ToString();
            semantic.RemoveAt(i - 1);
            semantic.RemoveAt(i);
            i--;
          }
          else if(i + 1 < semantic.Count)
          {
             var after = semantic[i + 1] as string;

            if (IsNumber(token) && IsNumber(after))
            {
              int tokenInt = Convert.ToInt32(token);
              int afterInt = Convert.ToInt32(after);

              var currentResult = tokenInt * afterInt;

              semantic[i] = currentResult.ToString();
              semantic.RemoveAt(i + 1);
            }
          }
      }

      for(int i = 0; i < semantic.Count; i++)
      {
        var element = semantic[i];
        var token = element as string;

          if (token == "+")
          {
            var previous = semantic[i - 1] as string;
            var after = semantic[i + 1] as string;

            int previousInt = Convert.ToInt32(previous);
            int afterInt = Convert.ToInt32(after);

            var currentResult = previousInt + afterInt;

            semantic[i] = currentResult.ToString();
            semantic.RemoveAt(i - 1);
            semantic.RemoveAt(i);
            i--;
          }

          if (token == "-")
          {
            var previous = semantic[i - 1] as string;
            var after = semantic[i + 1] as string;

            int previousInt = Convert.ToInt32(previous);
            int afterInt = Convert.ToInt32(after);

            var currentResult = previousInt - afterInt;

            semantic[i] = currentResult.ToString();
            semantic.RemoveAt(i - 1);
            semantic.RemoveAt(i);
            i--;
          }
      }
      
      var result = Convert.ToInt32(semantic[0].ToString());
      return result;
  }

  static int RunNonParenthesis(List<string> tokens)
  {
    int result = 0;

    return result;
  }

  static List<object> SemanticAnalyze(List<string> tokens, ref int startToken)
  {
      List<object> result = new List<object>();

      for(; startToken < tokens.Count; startToken++)
      {
        var token = tokens[startToken];

        if (token == "(")
        {
          startToken++;

          var sub = SemanticAnalyze(tokens, ref startToken);
          result.Add(sub);
        }
        else if(token == ")")
        {
          //startToken++;
          break;
        }
        else
        {
               
         result.Add(token);
        }
      }

      return result;
  }

  static void PrintSemantic(List<object> semantic, int tab)
  {
    foreach(var s in semantic)
    {
      if(s is string)
      {
         Console.WriteLine(tab + " " + s);
      }
      else 
      {
        List<object> subSemantic = s as List<object>;

        PrintSemantic(subSemantic, tab + 1);
      }
     
    }
  }

  static List<string> Lexer(string str)
  {
    var tokens = new List<string>();

    string currentToken = "";
    bool stillParsingANumber = false;
 
    bool parsingExponantion = false;

    for (int i = 0; i < str.Length; i++)
    {
      char c = str[i];

      if (IsNumber(c))
      {
        if (parsingExponantion)
        {
            tokens.Add(currentToken);
            currentToken = "";
            parsingExponantion = false;
        }

        currentToken += c;

        stillParsingANumber = true;
      }
      else
      {
        if (stillParsingANumber)
        {
            tokens.Add(currentToken);
            currentToken = "";
            stillParsingANumber = false;
        }
        
        if(c == '*')
        {
          currentToken += c.ToString();
          parsingExponantion = true;
        }
        else if(parsingExponantion)
        {
            tokens.Add(currentToken);
            currentToken = c.ToString();
            parsingExponantion = false;
        }
        else
        {
          currentToken = c.ToString();
        }

        if(!parsingExponantion && !stillParsingANumber && currentToken != "")
        {
          tokens.Add(currentToken);
          currentToken = "";
        }      
      }
    }

    if(stillParsingANumber || parsingExponantion)
    {
      tokens.Add(currentToken);
    }

     return tokens;
  }

  static void PrintTokens(List<string> tokens)
  {
    Console.WriteLine("-Tokens-");

    foreach(var token in tokens)
    {
      Console.WriteLine(token);
    }

    Console.WriteLine("-Tokens End-");
  }

  static bool IsNumber(string str)
  {
    if(string.IsNullOrEmpty(str))
    {
      return false;
    }

    foreach(char c in str)
    {
      if(!IsNumber(c))
      {
        return false;
      }
    }
    
    return true;
  }

  static bool IsNumber(char c)
  {
    return c >= '0' && c <= '9';
  }

  static void Main() {  
    // keep this function call here
    Console.WriteLine(StringCalculate(Console.ReadLine()));
  } 

}